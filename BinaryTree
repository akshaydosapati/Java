class BinaryTree{

    /*A binary tree is made upof nodes, where each node has a reference to left and roght children.  
     *For every element of a new node(call from line no: 23) has been created with the help of a static class Node.
     */ 
    public static class Node{
        int data;
        Node lc; //left child
        Node rc; //right child
        Node(int data){
            this.data = data;
            this.lc = null;
            this.rc = null;
        }
    }
    /*builder class is used for the formation of a tree with the given elements.
     *We can use a builder object along with build method to call from main method to construct tree.
     */
    public static class builder{
        static int size = -1;
        public static Node buildtree(int arr[]){
            // with this method we can obtain a complete binary tree
            // After getting root element i.e., n we can perform many operations further
            size++;
            if(arr[size] == -1 || size >= arr.length) return null;
            //for every element the call will go to Node class to create a new node
            Node n = new Node(arr[size]); 
            n.lc = buildtree(arr);
            n.rc = buildtree(arr);
            return n;
        }
    }
    public void preorder(Node root){
        //It is a basic operation of tree
        //It first visits the root, then left subtree, thereafter right subtree
        if(root == null) return;
        System.out.print(root.data+" ");
        preorder(root.lc);
        preorder(root.rc);
    }
    public void inorder(Node root){
        //This traversal first visits left sub tree, then root and finally right sub tree.
        if(root == null) return;
        inorder(root.lc);
        System.out.print(root.data+" ");
        inorder(root.rc);
    }
    public void postorder(Node root){
        //It first travese throgh the left subtree, thenright subtree, thereafter root
        if(root == null) return;
        postorder(root.lc);
        postorder(root.rc);
        System.out.print(root.data+" ");
    }
    public void levelorder(Node root){
        //inorder method prints the elements in level order
        /*output:
        *1
        *2 3
        *4 5 6 */
        if(root == null) return;
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
        queue.add(null);
        while(!queue.isEmpty()){
            Node curr = queue.remove();
            if(curr == null){
                System.out.println();
                if(queue.isEmpty()) break;
                else queue.add(null);
            }
            else{
                System.out.print(queue.data);
                if(curr.lc != null) queue.add(curr.lc);
                if(curr.rc != null) queue.add(curr.rc);
            }
        }
    }
    public static int numberofnodes(Node root){
        if(root == null) return 0;
        int nodesofleftsubtree = numberofnodes(root.lc);
        int nodesofrightsubtree = numberofmodes(root.rc);
        return nodesofleftsubtree + nodesofrightsubtree + 1;
    }
    public static int sumofnodes(Node root){
        if(root == null) return 0;
        int  sumofleftsubtree = sumofnodes(root.lc);
        int sumofrightsubtree = sumofnodes(root.rc);
        return sumofleftsubtree + sumofrightsubtree + root.data;
    }
    publi static int heightoftree(Node root){
        if(root == null) return 0;
        int heightofleftsubtree = heightoftree(root.lc);
        int heightofrightsubtree = heightoftree(root.rc);
        return Math.max ( heightofleftsubtree + heightofrightsubtree ) + 1;
    }
    public static int diameteroftree(Node root){
        // returns the longest path between two nodes
        if(root == null) return 0;
        int left = diameteroftree(root.lc);
        int right = diameteroftree(root.rc);
        int diam = heightoftree(root.lc) + heightoftree(root.rc) + 1;
        return Math.max(diam,Math.max(left,right));
    }




    public static void main(String args[]){
        builder b = new builder();
        int[] elements = { 1, 2, 4, -1, -1, 5, -1, -1, 3, -1, 6, -1, -1 };
        Node n = buildtree(elements);
        preorder(n,lc);
    }
}