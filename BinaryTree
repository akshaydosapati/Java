class BinaryTree{
    public static class Node{
        int data;
        Node lc; //left child
        Node rc; //right child
        Node(int data){
            this.data = data;
            this.lc = null;
            this.rc = null;
        }
    }
    public static class builder{
        static int size = -1;
        public static Node buildtree(int arr[]){
            // with this method a complete binary tree has been
            // After getting root element i.e., n we can perform many operations further
            size++;
            if(arr[size] == -1 || size >= arr.length) return null;
            Node n = new Node(arr[size]); // root of the tree
            n.lc = buildtree(arr);
            n.rc = buildtree(arr);
            return n;
        }
    }
    public void preorder(Node root){
        //It is a basic operation of tree
        //It first prints the root, then left subtree, thereafter right subtree
        if(root == null) return;
        System.out.print(root.data+" ");
        preorder(root.lc);
        preorder(root.rc);
    }
    public void inorder(Node root){
        //It first prints the left subtree, then root element, thereafter right subtree
        if(root == null) return;
        inorder(root.lc);
        System.out.print(root.data+" ");
        inorder(root.rc);
    }
    public void postorder(Node root){
        //It first prints the left subtree, then root element, thereafter right subtree
        if(root == null) return;
        postorder(root.lc);
        postorder(root.rc);
        System.out.print(root.data+" ");
    }
    public void inorder(Node root){
        //inorder method prints the elements in level order
        if(root == null) return;
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
        queue.add(null);
        while(!queue.isEmpty()){
            Node curr = queue.remove();
            if(curr == null){
                System.out.println();
                if(queue.isEmpty()) break;
                else queue.add(null);
            }
            else{
                System.out.print(queue.data);
                if(curr.lc != null) queue.add(curr.lc);
                if(curr.rc != null) queue.add(curr.rc);
            }
        }
    }
    public static void main(String args[]){
        builder b = new builder();
        int[] elements = { 1, 2, 4, -1, -1, 5, -1, -1, 3, -1, 6, -1, -1 };
        Node n = buildtree(elements);
        preorder(n,lc);
       

    }
}